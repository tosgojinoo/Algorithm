'''
[설명]
크기 무한 -> 전체 계산 불필요. 범위 지정 필요
양의 정수 소용돌이 모양 -> 위치, 소용돌이(shell), shell의 꼭지점에서 부터 각 지점까지의 거리, r/c 값에 따른 shell 위치.
정 중앙 (0,0) == 1
(0,1) == 2
소용돌이는 반시계 방향
출력 조건 -> 동일한 출력을 위한 %{len}d 사용
1. 출력은 r1행부터 r2행까지 차례대로 출력한다.
2. 각 원소는 공백으로 구분한다.
3. 모든 행은 같은 길이를 가져야 한다.
4. 공백의 길이는 최소로 해야 한다.
5. 모든 숫자의 길이(앞에 붙는 공백을 포함)는 같아야 한다.
6. 만약 수의 길이가 가장 길이가 긴 수보다 작다면, 왼쪽에서부터 공백을 삽입해 길이를 맞춘다.

[문제]
r2 - r1 + 1개의 줄에 소용돌이를 예쁘게 출력
'''
'''
[알고리즘]
    -3 -2 -1  0  1  2  3
    --------------------
-3 |37 36 35 34 33 32 31
-2 |38 17 16 15 14 13 30
-1 |39 18  5  4  3 12 29
 0 |40 19  6  1  2 11 28
 1 |41 20  7  8  9 10 27
 2 |42 21 22 23 24 25 26
 3 |43 44 45 46 47 48 49
 
- 위치 계산
    - shell idx 별 최대값
        - idx 0: 1 == 1^2
        - idx 1: 9 == 3^2
        - idx 2:25 == 5^2
        - idx 3:49 == 7^2
        - (idx*2 + 1)^2
        - 오른쪽 아래 모서리의 값
    - idx r, c 중 절대값이 큰 수가 shell idx
    - (r,c)의 값 계산
        - shell 내 최대값부터의 상대 거리
        - dist == |shell idx - r/c| 의 합
        - 오른쪽, 윗면 (c > r 경우)
            - 이전 shell 최대값에서 거리만큼 증가
            - (2 * idx - 1) ** 2 + dist
        - 왼쪽, 아랫면 (c <= r 경우)
            - shell 내 최대값에서 거리만큼 차감
            - (2 * idx + 1) ** 2 - dist
- 최대 자리수 계산
    - 네 꼭지점 (r1, c1), (r1, c2), (r2, c1), (r2, c2)의 숫자 계산
    - str 변환 후 최장 길이
'''
'''
[구조]
- 최대 자리수 계산
- (r1, c1) ~ (r2, c2) 탐색
    - spiral(y, x) 호출
    - 최대 자리수 기준으로 출력
'''

def spiral(r, c):
    idx = max(abs(r), abs(c)) # x, y 각각의 절대값 중 큰 값이 껍질의 idx
    dist = abs(r - idx) + abs(c - idx)

    # 껍질의 오른쪽 아래 모서리의 값 = (2 * 껍질 index + 1)^2
    num1 = (2 * idx - 1) ** 2 + dist
    num2 = (2 * idx + 1) ** 2 - dist
    return num1 if c > r else num2


r1, c1, r2, c2 = map(int, input().split())
print_len = len(str(max(spiral(r1, c1), spiral(r1, c2), spiral(r2, c1), spiral(r2, c2)))) # 자리수 맞추기용
for i in range(r1, r2 + 1):
    for j in range(c1, c2 + 1):
        print(f"%{print_len}d" % spiral(i, j), end = " ")
    print()
