'''
[설명]
길이가 N 컨베이어 벨트
길이가 2N인 벨트가 이 컨베이어 벨트를 위아래로 감싸고 회전
벨트는 길이 1 간격으로 2N개의 칸
1부터 2N까지의 번호
i번 칸의 내구도는 Ai

- 벨트가 한 칸 회전
    - 1번부터 2N-1번까지의 칸은 다음 번호의 칸이 있는 위치로 이동
    - 2N번 칸은 1번 칸의 위치로 이동
- 로봇 위치
    - 1번 칸. "올리는 위치"
    - N번 칸. "내리는 위치". 즉시 내림
    - 컨베이어 벨트에 로봇을 하나씩 올림
- 내구도 1 감소
    - 로봇을 올리는 위치에 올리거나
    - 로봇이 어떤 칸으로 이동
- 로봇을 옮기는 과정
    - 1. 벨트가 각 칸 위에 있는 로봇과 함께 한 칸 회전
    - 2. 가장 먼저 벨트에 올라간 로봇
        - 벨트가 회전하는 방향으로 한 칸 이동할 수 있다면 이동
            - 로봇이 이동하기 위해서는 이동하려는 칸에 로봇이 없으며, 그 칸의 내구도가 1 이상
        - 만약 이동할 수 없다면 가만히
    - 3. 내구도가 0인 칸의 개수가 K개 이상. 과정 종료.
    - 4. 그렇지 않다면 1번으로 돌아감

[문제]
몇 번째 단계가 진행 중일때 종료
'''
'''
[알고리즘]
- 내구도 감소
    - 내구도 0이 되면 바로 cnt 업데이트
    - 내구도 감소하면 바로 arr 업데이트
- 벨트 회전
    - list slice로 한번에 회전 후 값 업데이트
    - 마지막 로봇 제거
- 로봇 이동
    - (N-1 ~ 1)번 로봇 역순으로 이동 처리
        - 겹치지 않도록
        - 마지막 로봇은 무조건 내리므로 제외
    - 첫 로봇은 내구도 확인 후 추가
'''
'''
[구조]
- arr 저장 (내구도)
- robot = n개
- 단계 확인용 step, 내구도 0 칸수 cnt

- while cnt가 제한 칸수 K 이하일 때까지:
    - 단계 step ++
    
    # rotateBelt()
    - arr(벨트 내구도 정보) 1씩 이동
    - robot 1씩 이동, idx 0 공간 비움.
    - 마지막 로봇 제거
    
    # moveRobot()
    - for N개 로봇 역순:
        - if i번 벨트에 로봇이 있고, i < n - 1이면(마지막 i 로봇은 내려야함):
            - if i+1번 벨트에 로봇이 없고, 내구도 남음: 
                - 로봇 이동
                - 내구도 감소 arr[i + 1] --
                - if i+1이 내구도 0:
                    - cnt ++

    # rideRobot()
    - if 0번에 내구도 남아 있으면: 
        - 첫 컨테이너에 신규 로봇 추가
        - 내구도 감소 arr[0] --
        - if 0번의 내구도 0:
            - cnt ++

- print(step)


'''

n, k = map(int, input().split()) # 컨베이어 칸수 N, 내구도 0 제한 칸수 K
arr = list(map(int, input().split())) # 내구도
robot = [0]*n
step = 0
cnt = 0

while cnt < k: # 제한 칸수 이하일 때까지
    step += 1
    # rotateBelt()
    arr[1:], arr[0] = arr[0:-1], arr[-1]
    robot[1:], robot[0] = robot[0:-1], 0

    # unrideRobot()
    robot[-1] = 0 # 마지막 컨베이어 로봇 제거.
    # moveRobot()
    for i in range(n - 1, -1, -1):
        if i < n - 1 and robot[i]: # 마지막 이전까지 컨베이어. 로봇 있다면.
            if not robot[i + 1] and arr[i + 1]: # 로봇이 없고, 내구도 남음.
                robot[i], robot[i + 1] = 0, 1 # 이동
                arr[i + 1] -= 1 # 내구도 감소
                if not arr[i + 1]: # 내구도 0이면.
                    cnt += 1

    # rideRobot()
    if arr[0]: # 내구도 남아 있으면
        robot[0] = 1 # 첫 컨테이너에 올릴 신규 로봇
        arr[0] -= 1 # 내구도 감소
        if not arr[0]: # 내구도 0
            cnt += 1

print(step)

